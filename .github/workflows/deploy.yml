name: Build & Deploy Code-Server to EC2 via SSM

on:
  push:
    branches:
      - code-server-aws-deploy

jobs:
  build-and-push:
    name: Build Docker and Push to ECR
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}
      
      - name: Login to ECR
        uses: aws-actions/amazon-ecr-login@v2
      
      - name: Build Docker image
        run: |
          docker build -t code-server-app .
          docker tag code-server-app:latest ${{ secrets.ECR_REPOSITORY }}:latest
      
      - name: Push Docker image to ECR
        run: |
          docker push ${{ secrets.ECR_REPOSITORY }}:latest

  deploy:
    name: Deploy to EC2 via SSM
    runs-on: ubuntu-latest
    needs: build-and-push
    
    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}
      
      - name: Deploy to EC2 via SSM
        run: |
          # Find the instance ID using the Name tag
          INSTANCE_ID=$(aws ec2 describe-instances \
            --filters \
              "Name=instance-state-name,Values=running" \
              "Name=tag:Name,Values=${{ secrets.EC2_INSTANCE_TAG_NAME }}" \
            --query "Reservations[0].Instances[0].InstanceId" \
            --output text)
          
          echo "Looking for instance with Name tag: ${{ secrets.EC2_INSTANCE_TAG_NAME }}"
          echo "Found Instance ID: $INSTANCE_ID"
          
          # Validate Instance ID
          if [ -z "$INSTANCE_ID" ] || [ "$INSTANCE_ID" == "None" ]; then
            echo "❌ Error: No running instance found with tag Name=${{ secrets.EC2_INSTANCE_TAG_NAME }}"
            echo "Available running instances:"
            aws ec2 describe-instances \
              --filters "Name=instance-state-name,Values=running" \
              --query "Reservations[].Instances[].[InstanceId,Tags[?Key=='Name'].Value|[0],State.Name]" \
              --output table
            exit 1
          fi
          
          # Get ECR registry URL
          AWS_ACCOUNT_ID=$(aws sts get-caller-identity --query Account --output text)
          ECR_REGISTRY="${AWS_ACCOUNT_ID}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com"
          
          echo "ECR Registry: $ECR_REGISTRY"
          echo "Repository: ${{ secrets.ECR_REPOSITORY }}"
          echo "Full Image: ${ECR_REGISTRY}/${{ secrets.ECR_REPOSITORY }}:latest"
          
          # Send deployment command via SSM
          COMMAND_ID=$(aws ssm send-command \
            --instance-ids "$INSTANCE_ID" \
            --document-name "AWS-RunShellScript" \
            --comment "Deploy Code-Server from GitHub Actions" \
            --parameters commands="[
              'echo \"Starting deployment...\"',
              'aws ecr get-login-password --region ${{ secrets.AWS_REGION }} | docker login --username AWS --password-stdin ${ECR_REGISTRY}',
              'echo \"Stopping existing container...\"',
              'docker stop code-server || true',
              'docker rm code-server || true',
              'echo \"Pulling latest image...\"',
              'docker pull ${ECR_REGISTRY}/${{ secrets.ECR_REPOSITORY }}:latest',
              'echo \"Starting new container...\"',
              'docker run -d --name code-server -p 8080:8080 ${ECR_REGISTRY}/${{ secrets.ECR_REPOSITORY }}:latest',
              'echo \"Deployment complete!\"',
              'docker ps | grep code-server'
            ]" \
            --query "Command.CommandId" \
            --output text)
          
          echo "✅ SSM Command sent successfully!"
          echo "Command ID: $COMMAND_ID"
          
          # Wait for command to complete (optional but recommended)
          echo "Waiting for deployment to complete..."
          sleep 5
          
          # Check command status
          aws ssm get-command-invocation \
            --command-id "$COMMAND_ID" \
            --instance-id "$INSTANCE_ID" \
            --query '[Status,StandardOutputContent]' \
            --output text || echo "Command still running..."
