name: Build & Deploy Code-Server to EC2 via SSM

on:
  push:
    branches:
      - code-server-aws-deploy

jobs:
  build-and-push:
    name: Build Docker and Push to ECR
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}
      
      - name: Login to ECR
        uses: aws-actions/amazon-ecr-login@v2
      
      - name: Build and Push Docker image
        run: |
          # Get AWS Account ID
          AWS_ACCOUNT_ID=$(aws sts get-caller-identity --query Account --output text)
          ECR_REGISTRY="${AWS_ACCOUNT_ID}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com"
          
          echo "ECR Registry: $ECR_REGISTRY"
          echo "Repository: ${{ secrets.ECR_REPOSITORY }}"
          
          # Build the image
          docker build -t code-server-app .
          
          # Tag with full ECR path
          docker tag code-server-app:latest ${ECR_REGISTRY}/${{ secrets.ECR_REPOSITORY }}:latest
          
          # Push to ECR
          docker push ${ECR_REGISTRY}/${{ secrets.ECR_REPOSITORY }}:latest

  deploy:
    name: Deploy to EC2 via SSM
    runs-on: ubuntu-latest
    needs: build-and-push
    
    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}
      
      - name: Deploy to EC2 via SSM
        run: |
          # Find the instance ID
          INSTANCE_ID=$(aws ec2 describe-instances \
            --filters \
              "Name=instance-state-name,Values=running" \
              "Name=tag:Name,Values=${{ secrets.EC2_INSTANCE_TAG_NAME }}" \
            --query "Reservations[0].Instances[0].InstanceId" \
            --output text)
          
          echo "Found Instance ID: $INSTANCE_ID"
          
          if [ -z "$INSTANCE_ID" ] || [ "$INSTANCE_ID" == "None" ]; then
            echo "Error: No running instance found"
            exit 1
          fi
          
          # Get ECR registry URL
          AWS_ACCOUNT_ID=$(aws sts get-caller-identity --query Account --output text)
          ECR_REGISTRY="${AWS_ACCOUNT_ID}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com"
          FULL_IMAGE="${ECR_REGISTRY}/${{ secrets.ECR_REPOSITORY }}:latest"
          
          echo "Deploying image: $FULL_IMAGE"
          
          # Send deployment command
          aws ssm send-command \
            --instance-ids "$INSTANCE_ID" \
            --document-name "AWS-RunShellScript" \
            --comment "Deploy Code-Server" \
            --parameters commands="[
              'echo \"Starting deployment...\"',
              'export PATH=/usr/local/bin:/usr/bin:/bin',
              '/usr/bin/aws ecr get-login-password --region ${{ secrets.AWS_REGION }} | /usr/bin/docker login --username AWS --password-stdin ${ECR_REGISTRY}',
              '/usr/bin/docker stop code-server || true',
              '/usr/bin/docker rm code-server || true',
              '/usr/bin/docker pull ${FULL_IMAGE}',
              '/usr/bin/docker run -d --name code-server -p 8080:8080 ${FULL_IMAGE}',
              '/usr/bin/docker ps | grep code-server'
            ]"
          
          echo "Deployment complete!"
          
